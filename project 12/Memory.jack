// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array ram, free_list;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let free_list = 2048; //conventional base address of heap

        let free_list[0] = 0;
        let free_list[1] = 16384 - free_list - 2;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int addr, new_length;
        let addr = free_list;
        while (~(addr = 0)) {
            if (~(ram[addr + 1] < (size + 2))) {
                let new_length = ram[addr + 1] - size - 2;
                let ram[addr + 1] = new_length;  //change the length statement of the free space now that some/all is being used
                let ram[addr + 3 + new_length] = size; //set the size of the now used space for if it is ever deallocated
                return addr + 4 + new_length; //return the address of the first unused space
            }
            let addr = ram[addr];
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let ram[o - 2] = free_list;
        let free_list = o - 2;
        return;
    }
}
